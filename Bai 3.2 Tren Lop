#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <unistd.h>
#include <pthread.h>

#define PORT 8000
#define BUFFER_SIZE 1024

typedef struct
{
    int client_socket1;
    int client_socket2;
} Pair;

void *handle_client(void *arg);
void cleanup(Pair *pair);

int main()
{
    int server_socket, client_socket;
    struct sockaddr_in server_address, client_address;
    socklen_t client_address_len;

    // Tạo socket
    server_socket = socket(AF_INET, SOCK_STREAM, 0);
    if (server_socket == -1)
    {
        perror("Error creating socket");
        exit(EXIT_FAILURE);
    }

    // Thiết lập địa chỉ server
    server_address.sin_family = AF_INET;
    server_address.sin_port = htons(PORT);
    server_address.sin_addr.s_addr = INADDR_ANY;

    // Liên kết địa chỉ server với socket
    if (bind(server_socket, (struct sockaddr *)&server_address, sizeof(server_address)) == -1)
    {
        perror("Error binding");
        exit(EXIT_FAILURE);
    }

    // Lắng nghe kết nối đến
    if (listen(server_socket, 2) == -1)
    {
        perror("Error listening");
        exit(EXIT_FAILURE);
    }

    printf("Server is listening on port %d\n", PORT);

    Pair *pair = malloc(sizeof(Pair));

    while (1)
    {
        // Chấp nhận kết nối từ client
        client_address_len = sizeof(client_address);
        client_socket = accept(server_socket, (struct sockaddr *)&client_address, &client_address_len);
        if (client_socket == -1)
        {
            perror("Error accepting connection");
            exit(EXIT_FAILURE);
        }

        printf("New client connected: %s:%d\n", inet_ntoa(client_address.sin_addr), ntohs(client_address.sin_port));

        if (pair->client_socket1 == 0)
        {
            pair->client_socket1 = client_socket;
        }
        else if (pair->client_socket2 == 0)
        {
            pair->client_socket2 = client_socket;

            pthread_t thread1, thread2;

            // Tạo thread cho cặp client
            if (pthread_create(&thread1, NULL, handle_client, (void *)pair) != 0)
            {
                perror("Error creating thread");
                exit(EXIT_FAILURE);
            }

            if (pthread_create(&thread2, NULL, handle_client, (void *)pair) != 0)
            {
                perror("Error creating thread");
                exit(EXIT_FAILURE);
            }

            // Chờ kết thúc của thread
            if (pthread_join(thread1, NULL) != 0)
            {
                perror("Error joining thread");
                exit(EXIT_FAILURE);
            }

            if (pthread_join(thread2, NULL) != 0)
            {
                perror("Error joining thread");
                exit(EXIT_FAILURE);
            }

            // Đặt lại giá trị client socket
            pair->client_socket1 = 0;
            pair->client_socket2 = 0;
        }
    }

    free(pair);
    close(server_socket);

    return 0;
}

void *handle_client(void *arg)
{
    Pair *pair = (Pair *)arg;
    int client_socket1 = pair->client_socket1;
    int client_socket2 = pair->client_socket2;

    char buffer[BUFFER_SIZE];
    ssize_t bytes_received, bytes_sent;

    while (1)
    {
        // Nhận tin nhắn từ client 1
        bytes_received = recv(client_socket1, buffer, BUFFER_SIZE, 0);
        if (bytes_received <= 0)
        {
            cleanup(pair);
            break;
        }
        buffer[bytes_received] = '\0';

        // Gửi tin nhắn từ client 1 đến client 2
        if (send(client_socket2, buffer, bytes_received, 0) == -1)
        {
            cleanup(pair);
            break;
        }

        // Nhận tin nhắn từ client 2
        bytes_received = recv(client_socket2, buffer, BUFFER_SIZE, 0);
        if (bytes_received <= 0)
        {
            cleanup(pair);
            break;
        }
        buffer[bytes_received] = '\0';

        // Gửi tin nhắn từ client 2 đến client 1
        if (send(client_socket1, buffer, bytes_received, 0) == -1)
        {
            cleanup(pair);
            break;
        }
    }

    return NULL;
}

void cleanup(Pair *pair)
{
    close(pair->client_socket1);
    close(pair->client_socket2);
    pair->client_socket1 = 0;
    pair->client_socket2 = 0;
}
